# ‚ö†Ô∏è IMPORTANT NOTICE ‚Äî PLEASE READ CAREFULLY

üö´ **This repository is intended for viewing purposes only. Any direct copying or reproduction of the code, layout, or any part of this project is strictly prohibited.**

üìö **If you're a student**: Using this code in your own assignments may be considered academic dishonesty by UWE. This project is provided to **demonstrate how a Flask site can be structured** and how more complex Flask functionality can be implemented.

üìÑ **License**  
This repository is strictly **read-only**. Unauthorized copying, reproduction, or distribution of any part of this project is **strictly prohibited**.  
By continuing to view or interact with this repository, **you accept these terms.**

---

## üì¨ Contact

If you have questions or would like to discuss this project further, please feel free to reach out.

---

## üöÄ Getting Started

You can run the project locally using **Docker (recommended)** or manually with Python/Flask (advanced). Docker will set up everything automatically, including the database and test data.

---

## üê≥ Docker Setup (Recommended)

### ‚úÖ Prerequisites
- Install [Docker Desktop](https://www.docker.com/products/docker-desktop)
- Navigate to the root of the project directory

##########################################
#           Docker Commands              #
##########################################

# Before running any commands you will need to copy the .env-example file and rename the copy to .env . Once done change the 
# environment variables to whatever you would like. You can use these details to connect to your own database at localhost:{PORT}

# Once done the above steps. Navigate to the app directory within your terminal.
# Simply run `docker compose up -d` (The -d means you can continue to use the terminal after the command has executed)
# Running this command will also create a database schema, use the details below to login to the site, and then use the .env variables for the database connection
# Super admin user
# Email: ethan@email.com
# Password: 1234


##########################################
#              Run Manually              #
##########################################


# The below are optional steps to run the application manually, you can alternatively install and run docker which will create the environment


##########################################
#              Flask Commands            #
##########################################
# To run Flask you will need to be in the virtual environment, to get started enter the following command while within the flask-backend folder

# For the first time running manually you will also need to run the below additional commands

# Linux 
python3 -m venv .venv

# Windows
py -3 -m venv .venv

# Both Windows and Mac
Once done you will need to run pip install on each line of requirements.txt . Once done restart your command line and carry on from the below commands
to be fully setup.

# Linux
. .venv/bin/activate

# Windows
.venv\Scripts\activate

# Then run the following, if you are not on port 5000 you will need to force it with the '--port 5000' arg
flask run   (Will run on 127.0.0.1:5000)

# Creating new migration file (for development)
flask db migrate -m "Add age column to User model"

# To apply database changes/run migrations
flask db upgrade

##########################################
#              Database Commands         #
##########################################
# Within the PR a MySQL dump is provided and loaded upon building of the docker container. If you are running the site outside a docker container
# you will either need to follow one of the below options:

# It is advised to use the dockerised containers as this will mount a SQL volume automatically.

# Login to CSCT cloud and connect to ethan2clay_prj
# Manually import the mysql dump provided within the sql folder

# Add your own connector which can be done by changing .env 
